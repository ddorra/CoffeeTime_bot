from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.storage import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import tracemalloc
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile, InputMediaPhoto
from db import add_user, add_user_name, add_user_numb, add_user_telegramID, get_user_name, get_user_numb, get_user_tgID, drop_user_reg, create_order, choise_filial, add_order, add_time, status_order, get_filial, get_order_text, get_time, check_order_status, sending_time
from markup import inl_FL, inl_NV, contuine, inl_time, inl_itog
import json
import datetime




TOKEN = '5842358572:AAGOl88qgoRjyOLi4fbSB90XOqVGYVz47RU'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())

# –í–∫–ª—é—á–µ–Ω–∏–µ tracemalloc
tracemalloc.start()

messages = []

class user_reg(StatesGroup):
	name = State()
	phone_number = State()
	telegramID = State()

class SomeState(StatesGroup):
	ADD_POSITION = State()

@dp.message_handler(state=user_reg.name)
async def add_name_(message: types.Message, state=FSMContext):
	chat_id = message.chat.id
	await state.finish()
	add_user_name(message)
	await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫: ")
	await user_reg.telegramID.set()

@dp.message_handler(state=user_reg.telegramID)
async def add_TGID_(message: types.Message, state=FSMContext):
	chat_id = message.chat.id
	await state.finish()
	add_user_telegramID(message)
	await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
	await user_reg.phone_number.set()

@dp.message_handler(state=user_reg.phone_number)
async def add_numb_(message: types.Message, state=FSMContext):
	chat_id = message.chat.id
	await state.finish()
	add_user_numb(message)
	await bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! \n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /order")	

@dp.callback_query_handler(lambda call: call.data and call.data.startswith('FL'))
async def filial_callback(call, state=FSMContext):

	if call.message:
		if call.data == 'FL1':
			await bot.send_message(call.message.chat.id,'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª–∏–∞–ª 1')	
			choise_filial(call.message, '–§–∏–ª–∏–∞–ª 1')
			await NV(call.message)
		if call.data == 'FL2':
			await bot.send_message(call.message.chat.id,'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª–∏–∞–ª 2')
			choise_filial(call.message, '–§–∏–ª–∏–∞–ª 2')
			await NV(call.message)
		if call.data == 'FL3':
			await bot.send_message(call.message.chat.id,'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª–∏–∞–ª 3')
			choise_filial(call.message, '–§–∏–ª–∏–∞–ª 3')
			await NV(call.message)

@dp.callback_query_handler(lambda call: call.data and call.data.startswith('NV'))
async def NV_callback(call, state=FSMContext):
	
	filial = get_filial(call.message.chat.id)

	if call.message:
			if call.data == 'NV_menu':
				await bot.send_message(call.message.chat.id,'–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é –Ω–∏–∂–µ')
				if filial == '–§–∏–ª–∏–∞–ª 1':
					photo = open('C:/Users/–î–∞—à–∞/telegram_bot/chat_bot/FL1.jpg', 'rb')
					await call.message.answer_photo(photo, caption="–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞ 1")
				if filial == '–§–∏–ª–∏–∞–ª 2':
					photo = open('C:/Users/–î–∞—à–∞/telegram_bot/chat_bot/FL2.jpg', 'rb')
					await call.message.answer_photo(photo, caption="–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞ 2")
				if filial == '–§–∏–ª–∏–∞–ª 3':
					photo = open('C:/Users/–î–∞—à–∞/telegram_bot/chat_bot/FL3.jpg', 'rb')
					await call.message.answer_photo(photo, caption="–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞ 3")	
			if call.data == 'NV_order':
				await bot.send_message(call.message.chat.id,'–í—ã –±—É–¥–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª–∏–∞–ª–∞')
				await command_order(call.message)
			if call.data == 'NV_write_order':
				await bot.send_message(call.message.chat.id,'–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
				await order_text(call.message)
	

@dp.callback_query_handler(lambda call: call.data and call.data.startswith('min'))
async def time_callback(call, state=FSMContext):

	if call.message:

		if call.data == 'min_tyt':
			await bot.send_message(call.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ "–£–∂–µ —Ç—É—Ç"')
			add_time(call.message, '–£–∂–µ —Ç—É—Ç')
			await itog (call.message)
		if call.data == 'min_5':
			await bot.send_message(call.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ë—É–¥—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"')
			add_time(call.message, '5 –º–∏–Ω—É—Ç')
			await itog (call.message)
		if call.data == 'min_10':
			await bot.send_message(call.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ë—É–¥—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"')
			add_time(call.message, '10 –º–∏–Ω—É—Ç')
			await itog (call.message)
		if call.data == 'min_20':
			await bot.send_message(call.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ë—É–¥—É —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç"')
			add_time(call.message, '20 –º–∏–Ω—É—Ç')
			await itog (call.message)
		if call.data == 'min_back':
			await NV(call.message)	


	
@dp.callback_query_handler(lambda call: call.data and call.data.startswith('itog'))
async def order_callback(call, state=FSMContext):
	if call.message:

		if call.data == 'itog_back':
			await NV(call.message)
		if call.data == 'itog_con':
			await bot.send_message(call.message.chat.id, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–∞—Ä–∏—Å—Ç–∞, —Å–∫–æ—Ä–æ –µ–≥–æ –ø—Ä–∏–º—É—Ç –≤ —Ä–∞–±–æ—Ç—É!')
			current_time = datetime.datetime.now()
			formatted_time = current_time.strftime("%H:%M:%S")  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á—á:–º–º:—Å—Å
			sending_time(call.message,formatted_time)
			status_order(call.message,'1')

@dp.message_handler(commands='order')
async def command_order(message: types.Message, state=FSMContext):
	create_order(message)
	await message.reply("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–∏–ª–∏–∞–ª–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:", reply_markup=inl_FL())

async def NV(message: types.Message, state=FSMContext):
	await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—É—é –Ω–∏–∂–µ. \n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª–∏–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥. \n–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìù–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.", reply_markup=inl_NV())
async def order_text(message: types.Message, state=FSMContext):
	await message.reply("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é' –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –≤ –∑–∞–∫–∞–∑–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –†–ê–ó–ù–´–ú–ò —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ - 20! \n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=contuine())
	
async def time_order(message: types.Message, state=FSMContext):
	await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è –∫–æ—Ñ–µ–π–Ω–∏:", reply_markup=inl_time())
async def itog(message: types.Message):
	chat_id = message.chat.id
	filial = get_filial(chat_id)
	order_json = get_order_text(chat_id)
	order_list = json.loads(order_json)
	OTime = get_time(chat_id)

	order_lines = '\n'.join(order_list)  # –°–æ–µ–¥–∏–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ order_list —Å –ø–æ–º–æ—â—å—é —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    
	await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ {}.\n–í–∞—à –∑–∞–∫–∞–∑ {}.\n–í—ã –±—É–¥–µ—Ç–µ —á–µ—Ä–µ–∑ {}.\n–í—Å–µ –≤–µ—Ä–Ω–æ?".format(filial, order_lines, OTime), reply_markup=inl_itog())
	
	await check_order_status(chat_id, bot)



@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", content_types=types.ContentTypes.TEXT)
async def add_position(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤:")
    await SomeState.ADD_POSITION.set()


@dp.message_handler(state=SomeState.ADD_POSITION, content_types=types.ContentTypes.TEXT)
async def process_position(message: types.Message, state: FSMContext):
    global messages
    message_text = message.text

    if len(messages) >= 20:
        await message.reply("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ.")
    else:
        messages.append(message_text)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤

    await message.reply("–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é'. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.", reply_markup=contuine())
    await state.finish()

@dp.message_handler(lambda message: message.text=="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def handle_continue(message: types.Message, state: FSMContext):
    await message.reply("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'")
    await history(message, state)


async def history(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    if messages:
        await message.reply("–í–∞—à –∑–∞–∫–∞–∑:", reply_markup=types.ReplyKeyboardRemove())
        await bot.send_message(chat_id, '\n'.join(messages))
        json_data = json.dumps(messages)
        add_order(message, json_data)
        await time_order(message)
    else:
        await bot.send_message(chat_id, '–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏')
        await NV(message)     


@dp.message_handler(commands='restart')
async def command_restart(message: types.Message, state=FSMContext):
	chat_id = message.chat.id
	drop_user_reg(chat_id)
	await bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω–∞! \n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")


@dp.message_handler(commands='start')
async def command_start(message: types.Message, state=FSMContext):
	chat_id = message.chat.id
	user_status = add_user(message)
	if user_status == False:
		user_name = get_user_name(chat_id)
		user_numb = get_user_numb(chat_id)
		user_tgID = get_user_tgID(chat_id)
		await bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! \n–í–∞—à–µ –∏–º—è: {} \n–í–∞—à –Ω–∏–∫: {} \n–í–∞—à –Ω–æ–º–µ—Ä: {} \n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤–æ–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /restart \n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /order".format(user_name,user_tgID,user_numb))
	else:
		await bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç, –Ø –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤! \n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è \n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:')
		await user_reg.name.set()


if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)
	# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ tracemalloc
	tracemalloc.stop()